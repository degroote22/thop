{"version":3,"sources":["webpack:///./src/pages/index.tsx"],"names":["pageQuery","getProfitFromFile","data","item","d","find","x","index","profit","Error","MakeCell","props","sorted","row","random","greedy","g3","sort","a","b","min","total","length","frac","value","unitary","Math","abs","hex","floor","pow","toString","color","react__WEBPACK_IMPORTED_MODULE_9__","style","backgroundColor","className","IndexPage","render","_this","this","greedyJson","r","map","Object","assign","randomJson","greedy3Json","columns","Header","accessor","width","Cell","react_table__WEBPACK_IMPORTED_MODULE_10__","defaultPageSize","name","split","getNameFromPath","React"],"mappings":"yQAsCaA,UAAS,cAsChBC,EAAoB,SAACC,EAAiBC,GAC1C,IAAMC,EAAIF,EAAKG,KAAK,SAAAC,GAAC,OAAIA,EAAEC,QAAUJ,EAAKI,QAE1C,GAAIH,EACF,OAAOA,EAAEI,OAET,MAAMC,MAAM,8BAIVC,EAAW,SAACC,GAChB,IAAMC,EAAS,CAACD,EAAME,IAAIC,OAAQH,EAAME,IAAIE,OAAQJ,EAAME,IAAIG,IAAIC,KAChE,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,IAEVC,EAAMR,EAAO,GAEbS,EADMT,EAAOA,EAAOU,OAAS,GACfF,EACdG,EAAOZ,EAAMa,MAAQJ,EACrBK,EAAUC,KAAKC,IAAIJ,EAAOF,GAC1BO,GAAO,IAAMF,KAAKG,MAA6B,GAAvBH,KAAKI,IAAIL,EAAS,KAAUM,SAAS,IAC7DC,EAAK,IAAOJ,EAAP,KAAeA,EAC1B,OACEK,EAAA,sBAAMC,MAAO,CAAEC,gBAAiBH,GAASI,UAAU,UAChDzB,EAAMa,QAIQa,4FACZC,kBAAS,IAAAC,EAAAC,KACRtC,EAAOsC,KAAK7B,MAAMT,KAAKuC,WAAWC,EAAEC,IACxC,SAACxC,GAAD,OAAAyC,OAAAC,OAAA,GACK1C,EADL,CAEEY,OAAQZ,EAAKK,OACbM,OAAQb,EAAkBsC,EAAK5B,MAAMT,KAAK4C,WAAWJ,EAAGvC,GACxDa,GAAIf,EAAkBsC,EAAK5B,MAAMT,KAAK6C,YAAYL,EAAGvC,OAInD6C,EAAU,CACd,CACEC,OAAQ,QACRC,SAAU,QACVC,MAAO,IAET,CACEF,OAAQ,OACRC,SAAU,QAEZ,CACED,OAAQ,6BACRC,SAAU,SACVE,KAAM1C,GAER,CACEuC,OAAQ,qBACRC,SAAU,KACVE,KAAM1C,GAER,CACEuC,OAAQ,4BACRC,SAAU,SACVE,KAAM1C,IAGV,OACEuB,EAAA,cAACoB,EAAA,EAAD,CACEC,gBAAiB,IACjBpD,KAAMA,EAAKyC,IAAI,SAAArC,GAAC,OAAAsC,OAAAC,OAAA,GACXvC,EADW,CAEdiD,KAzEc,SAACA,GACvB,IAAMjD,EAAIiD,EAAKC,MAAM,KACrB,OAAOlD,EAAEA,EAAEgB,OAAS,GAuENmC,CAAgBnD,EAAEiD,UAE1BP,QAASA,QA5CsBU","file":"component---src-pages-index-tsx-3c2cb4c96eb9479ed51f.js","sourcesContent":["import { graphql } from \"gatsby\";\nimport * as React from \"react\";\nimport ReactTable from \"react-table\";\nimport \"react-table/react-table.css\";\n\n// Please note that you can use https://github.com/dotansimha/graphql-code-generator\n// to generate all types from graphQL schema\ninterface IResult {\n  time: number;\n  weight: number;\n  profit: number;\n  index: number;\n  name: string;\n}\ninterface IResultSummed extends IResult {\n  greedy: number;\n  random: number;\n  g3: number;\n}\ninterface IndexPageProps {\n  data: {\n    site: {\n      siteMetadata: {\n        siteName: string;\n      };\n    };\n    greedyJson: {\n      r: IResult[];\n    };\n    greedy3Json: {\n      r: IResult[];\n    };\n    randomJson: {\n      r: IResult[];\n    };\n  };\n}\n\nexport const pageQuery = graphql`\n  query IndexQuery {\n    greedyJson {\n      r {\n        time\n        weight\n        profit\n        name\n        index\n      }\n    }\n\n    greedy3Json {\n      r {\n        time\n        weight\n        profit\n        name\n        index\n      }\n    }\n\n    randomJson {\n      r {\n        time\n        weight\n        profit\n        name\n        index\n      }\n    }\n  }\n`;\n\nconst getNameFromPath = (name: string) => {\n  const x = name.split(\"/\");\n  return x[x.length - 1];\n};\nconst getProfitFromFile = (data: IResult[], item: IResult) => {\n  const d = data.find(x => x.index === item.index);\n\n  if (d) {\n    return d.profit;\n  } else {\n    throw Error(\"Nao encontrado no greedy2\");\n  }\n};\n\nconst MakeCell = (props: { value: number; row: IResultSummed }) => {\n  const sorted = [props.row.random, props.row.greedy, props.row.g3].sort(\n    (a, b) => a - b\n  );\n  const min = sorted[0];\n  const max = sorted[sorted.length - 1];\n  const total = max - min;\n  const frac = props.value - min;\n  const unitary = Math.abs(frac / total);\n  const hex = (255 - Math.floor(Math.pow(unitary, 3) * 60)).toString(16);\n  const color = `#${hex}ff${hex}`;\n  return (\n    <span style={{ backgroundColor: color }} className=\"number\">\n      {props.value}\n    </span>\n  ); // Custom cell components!\n};\nexport default class IndexPage extends React.Component<IndexPageProps, {}> {\n  public render() {\n    const data = this.props.data.greedyJson.r.map(\n      (item): IResultSummed => ({\n        ...item,\n        greedy: item.profit,\n        random: getProfitFromFile(this.props.data.randomJson.r, item),\n        g3: getProfitFromFile(this.props.data.greedy3Json.r, item)\n      })\n    );\n\n    const columns = [\n      {\n        Header: \"Index\",\n        accessor: \"index\",\n        width: 64\n      },\n      {\n        Header: \"Name\",\n        accessor: \"name\"\n      },\n      {\n        Header: \"Greedy Closest City Profit\",\n        accessor: \"greedy\",\n        Cell: MakeCell\n      },\n      {\n        Header: \"Greedy Test Profit\",\n        accessor: \"g3\",\n        Cell: MakeCell\n      },\n      {\n        Header: \"Choose Random City Profit\",\n        accessor: \"random\",\n        Cell: MakeCell\n      }\n    ];\n    return (\n      <ReactTable\n        defaultPageSize={200}\n        data={data.map(x => ({\n          ...x,\n          name: getNameFromPath(x.name)\n        }))}\n        columns={columns}\n      />\n    );\n  }\n}\n"],"sourceRoot":""}