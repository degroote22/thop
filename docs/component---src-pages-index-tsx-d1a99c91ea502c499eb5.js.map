{"version":3,"sources":["webpack:///./src/pages/index.tsx"],"names":["pageQuery","IndexPage","render","dataMap","this","props","data","allRawJson","edges","map","item","node","reduce","prev","curr","_Object$assign","Object","assign","name","r","names","keys","toAdd","_Object$assign2","d","find","x","profit","getProfitFromFile","split","length","columnsToAdd","Cell","sorted","row","sort","a","b","max","biggest","value","react__WEBPACK_IMPORTED_MODULE_11__","style","backgroundColor","className","MakeCell","Header","accessor","columns","width","concat","react_table__WEBPACK_IMPORTED_MODULE_12__","defaultPageSize","React"],"mappings":"oRAuCaA,UAAS,cA0DDC,4FACZC,kBACL,IAAMC,EAAUC,KAAKC,MAAMC,KAAKC,WAAWC,MACxCC,IAAI,SAAAC,GAAI,OAAIA,EAAKC,OACjBC,OAAO,SAACC,EAAMC,GAAS,IAAAC,EACtB,OAAAC,OAAAC,OAAA,GACKJ,IADLE,EAAA,IAEGD,EAAKI,MAAOJ,EAAKK,EAFpBJ,KAIC,IACCK,EAAQJ,OAAOK,KAAKlB,GAEpBG,EADKH,EAAgBiB,EAAM,IAE9BX,IACC,SAACC,GACC,IAAMY,EAAQF,EAAMR,OAAO,SAACC,EAAMK,GAAS,IAAAK,EACzC,OAAAP,OAAAC,OAAA,GACKJ,IADLU,EAAA,IAEGL,GArDW,SAACZ,EAAiBI,GAC1C,IAAMc,EAAIlB,EAAKmB,KAAK,SAAAC,GAAC,OAAIA,EAAER,OAASR,EAAKQ,OAEzC,OAAIM,EACKA,EAAEG,QAGD,EA8CUC,CACLzB,EAAgBe,GACjBR,GAJJa,KAOC,IACH,OAAAP,OAAAC,OAAA,GACKP,EACAY,KAIRb,IAAI,SAAAC,GACH,OAAAM,OAAAC,OAAA,GAAYP,EAAZ,CAAkBQ,MAtEDA,EAsEuBR,EAAKQ,KArE7CQ,EAAIR,EAAKW,MAAM,KACdH,EAAEA,EAAEI,OAAS,MAFE,IAACZ,EACjBQ,IAwEEK,EAAeX,EAAMX,IAAI,SAAAS,GAC7B,MAAO,CACLc,KA5DS,SAACZ,GAAD,OAAqB,SAACf,GAIrC,IAEM4B,EAFSb,EAAMX,IAAI,SAAAS,GAAI,OAAKb,EAAM6B,IAAYhB,KAE9BiB,KAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,IAEnCC,EAAML,EAAOA,EAAOH,OAAS,GAC7BS,EAAUlC,EAAMmC,QAAUF,EAMhC,OACEG,EAAA,sBACEC,MAAO,CAAEC,gBAAiBJ,EAAU,UAAY,WAChDK,UAAU,UAETvC,EAAMmC,QAwCCK,CAASzB,GACf0B,OAAQ5B,EACR6B,SAAU7B,KAIR8B,EAAO,CACX,CACEF,OAAQ,QACRC,SAAU,QACVE,MAAO,IAET,CACEH,OAAQ,OACRC,SAAU,SARDG,OAURnB,GAEL,OAAOU,EAAA,cAACU,EAAA,EAAD,CAAYC,gBAAiB,IAAK9C,KAAMA,EAAM0C,QAASA,QAtD3BK","file":"component---src-pages-index-tsx-d1a99c91ea502c499eb5.js","sourcesContent":["import { graphql } from \"gatsby\";\nimport * as React from \"react\";\nimport ReactTable from \"react-table\";\n// tslint:disable-next-line:no-submodule-imports\nimport \"react-table/react-table.css\";\n\n// Please note that you can use https://github.com/dotansimha/graphql-code-generator\n// to generate all types from graphQL schema\ninterface IResult {\n  time: number;\n  weight: number;\n  profit: number;\n  index: number;\n  name: string;\n}\n// tslint:disable-next-line:no-empty-interface\ninterface IResultSummed extends IResult {\n  // greedy: number;\n  // random: number;\n  // g3: number;\n}\ninterface IndexPageProps {\n  data: {\n    site: {\n      siteMetadata: {\n        siteName: string;\n      };\n    };\n    allRawJson: {\n      edges: Array<{\n        node: {\n          name: string;\n          r: IResult[];\n        };\n      }>;\n    };\n  };\n}\n\nexport const pageQuery = graphql`\n  query IndexQuery {\n    allRawJson {\n      edges {\n        node {\n          name\n          r {\n            time\n            weight\n            profit\n            name\n            index\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst getNameFromPath = (name: string) => {\n  const x = name.split(\"/\");\n  return x[x.length - 1];\n};\nconst getProfitFromFile = (data: IResult[], item: IResult) => {\n  const d = data.find(x => x.name === item.name);\n\n  if (d) {\n    return d.profit;\n  } else {\n    // throw Error(\"Nao encontrado no greedy2\");\n    return -1;\n  }\n};\n\nconst MakeCell = (names: string[]) => (props: {\n  value: number;\n  row: IResultSummed;\n}) => {\n  const values = names.map(name => (props.row as any)[name]);\n\n  const sorted = values.sort((a, b) => a - b);\n  // const min = sorted[0];\n  const max = sorted[sorted.length - 1];\n  const biggest = props.value === max;\n  // const total = max - min;\n  // const frac = props.value - min;\n  // const unitary = Math.abs(frac / total);\n  // const hex = (255 - Math.floor(Math.pow(unitary, 3) * 60)).toString(16);\n  // const color = `#${hex}ff${hex}`;\n  return (\n    <span\n      style={{ backgroundColor: biggest ? \"#00ff00\" : \"#ffffff\" }}\n      className=\"number\"\n    >\n      {props.value}\n    </span>\n  ); // Custom cell components!\n};\nexport default class IndexPage extends React.Component<IndexPageProps, {}> {\n  public render() {\n    const dataMap = this.props.data.allRawJson.edges\n      .map(item => item.node)\n      .reduce((prev, curr) => {\n        return {\n          ...prev,\n          [curr.name]: curr.r\n        };\n      }, {});\n    const names = Object.keys(dataMap);\n    const x = (dataMap as any)[names[0]] as IResult[];\n    const data = x\n      .map(\n        (item): any => {\n          const toAdd = names.reduce((prev, name) => {\n            return {\n              ...prev,\n              [name]: getProfitFromFile(\n                (dataMap as any)[name] as IResult[],\n                item\n              )\n            };\n          }, {});\n          return {\n            ...item,\n            ...toAdd\n          };\n        }\n      )\n      .map(item => {\n        return { ...item, name: getNameFromPath(item.name) };\n      });\n\n    const columnsToAdd = names.map(name => {\n      return {\n        Cell: MakeCell(names),\n        Header: name,\n        accessor: name\n      };\n    });\n\n    const columns = [\n      {\n        Header: \"Index\",\n        accessor: \"index\",\n        width: 64\n      },\n      {\n        Header: \"Name\",\n        accessor: \"name\"\n      },\n      ...columnsToAdd\n    ];\n    return <ReactTable defaultPageSize={200} data={data} columns={columns} />;\n  }\n}\n"],"sourceRoot":""}