{"version":3,"sources":["webpack:///./src/pages/index.tsx"],"names":["pageQuery","MakeCell","props","sorted","row","random","greedy","sort","a","b","min","total","length","unitary","value","hex","Math","ceil","toString","color","react__WEBPACK_IMPORTED_MODULE_9__","style","backgroundColor","className","IndexPage","render","_this","this","data","greedyJson","r","map","item","Object","assign","time","d","find","x","index","Error","getTimeFromFile","randomJson","columns","Header","accessor","width","Cell","react_table__WEBPACK_IMPORTED_MODULE_10__","defaultPageSize","name","split","getNameFromPath","React"],"mappings":"yQAkCaA,UAAS,cAsChBC,EAAW,SAACC,GAChB,IAAMC,EAAS,CAACD,EAAME,IAAIC,OAAQH,EAAME,IAAIE,QAAQC,KAAK,SAACC,EAAGC,GAAJ,OAAUA,EAAID,IACjEE,EAAMP,EAAO,GAEbQ,EADMR,EAAOA,EAAOS,OAAS,GACfF,EAEdG,GADOX,EAAMY,MAAQJ,GACJC,EACjBI,GAAO,IAAMC,KAAKC,KAAe,GAAVJ,IAAeK,SAAS,IAC/CC,EAAK,IAAOJ,EAAP,KAAeA,EAC1B,OACEK,EAAA,sBAAMC,MAAO,CAAEC,gBAAiBH,GAASI,UAAU,UAChDrB,EAAMY,QAIQU,4FACZC,kBAAS,IAAAC,EAAAC,KACRC,EAAOD,KAAKzB,MAAM0B,KAAKC,WAAWC,EAAEC,IACxC,SAACC,GAAD,OAAAC,OAAAC,OAAA,GACKF,EADL,CAEE1B,OAAQ0B,EAAKG,KACb9B,OA/BgB,SAACuB,EAAiBI,GACxC,IAAMI,EAAIR,EAAKS,KAAK,SAAAC,GAAC,OAAIA,EAAEC,QAAUP,EAAKO,QAE1C,GAAIH,EACF,OAAOA,EAAED,KAET,MAAMK,MAAM,6BAyBAC,CAAgBf,EAAKxB,MAAM0B,KAAKc,WAAWZ,EAAGE,OAIpDW,EAAU,CACd,CACEC,OAAQ,QACRC,SAAU,QACVC,MAAO,IAET,CACEF,OAAQ,OACRC,SAAU,QAEZ,CACED,OAAQ,cACRC,SAAU,SACVE,KAAM9C,GAER,CACE2C,OAAQ,cACRC,SAAU,SACVE,KAAM9C,IAGV,OACEmB,EAAA,cAAC4B,EAAA,EAAD,CACEC,gBAAiB,IACjBrB,KAAMA,EAAKG,IAAI,SAAAO,GAAC,OAAAL,OAAAC,OAAA,GACXI,EADW,CAEdY,KAjEc,SAACA,GACvB,IAAMZ,EAAIY,EAAKC,MAAM,KACrB,OAAOb,EAAEA,EAAE1B,OAAS,GA+DNwC,CAAgBd,EAAEY,UAE1BP,QAASA,QAtCsBU","file":"component---src-pages-index-tsx-6dd6e44c29b636452a6f.js","sourcesContent":["import { graphql } from \"gatsby\";\nimport * as React from \"react\";\nimport ReactTable from \"react-table\";\nimport \"react-table/react-table.css\";\n\n// Please note that you can use https://github.com/dotansimha/graphql-code-generator\n// to generate all types from graphQL schema\ninterface IResult {\n  time: number;\n  weight: number;\n  profit: number;\n  index: number;\n  name: string;\n}\ninterface IResultSummed extends IResult {\n  greedy: number;\n  random: number;\n}\ninterface IndexPageProps {\n  data: {\n    site: {\n      siteMetadata: {\n        siteName: string;\n      };\n    };\n    greedyJson: {\n      r: IResult[];\n    };\n    randomJson: {\n      r: IResult[];\n    };\n  };\n}\n\nexport const pageQuery = graphql`\n  query IndexQuery {\n    greedyJson {\n      r {\n        time\n        weight\n        profit\n        name\n        index\n      }\n    }\n\n    randomJson {\n      r {\n        time\n        weight\n        profit\n        name\n        index\n      }\n    }\n  }\n`;\n\nconst getNameFromPath = (name: string) => {\n  const x = name.split(\"/\");\n  return x[x.length - 1];\n};\nconst getTimeFromFile = (data: IResult[], item: IResult) => {\n  const d = data.find(x => x.index === item.index);\n\n  if (d) {\n    return d.time;\n  } else {\n    throw Error(\"Nao encontrado no greedy2\");\n  }\n};\n\nconst MakeCell = (props: { value: number; row: IResultSummed }) => {\n  const sorted = [props.row.random, props.row.greedy].sort((a, b) => b - a);\n  const min = sorted[0];\n  const max = sorted[sorted.length - 1];\n  const total = max - min;\n  const frac = props.value - min;\n  const unitary = frac / total;\n  const hex = (170 + Math.ceil(unitary * 85)).toString(16);\n  const color = `#${hex}ff${hex}`;\n  return (\n    <span style={{ backgroundColor: color }} className=\"number\">\n      {props.value}\n    </span>\n  ); // Custom cell components!\n};\nexport default class IndexPage extends React.Component<IndexPageProps, {}> {\n  public render() {\n    const data = this.props.data.greedyJson.r.map(\n      (item): IResultSummed => ({\n        ...item,\n        greedy: item.time,\n        random: getTimeFromFile(this.props.data.randomJson.r, item)\n      })\n    );\n\n    const columns = [\n      {\n        Header: \"Index\",\n        accessor: \"index\",\n        width: 64\n      },\n      {\n        Header: \"Name\",\n        accessor: \"name\"\n      },\n      {\n        Header: \"Greedy Time\",\n        accessor: \"greedy\",\n        Cell: MakeCell\n      },\n      {\n        Header: \"Random Time\",\n        accessor: \"random\",\n        Cell: MakeCell\n      }\n    ];\n    return (\n      <ReactTable\n        defaultPageSize={200}\n        data={data.map(x => ({\n          ...x,\n          name: getNameFromPath(x.name)\n        }))}\n        columns={columns}\n      />\n    );\n  }\n}\n"],"sourceRoot":""}